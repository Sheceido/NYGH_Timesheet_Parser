/** @typedef {import('./roster.js').Employee} Employee */
/** @typedef {import('./parser.js').Shift} Shift */
/**
 * @typedef {Map<number, Shift[]>} Duplicates
 * Represents a mapping of weekday indices to an array of row indices where duplicates occur.
 * - The key (`number`) corresponds to a weekday column index.
 * - The value (`Shift[]`) is an array of row indices in the grid where duplicates are found
 */
/**
 * @typedef {Array<{shift: Shift, names: Array<string>}>} MultipleNames
 * Represents a list of shifts paired with a list of multiple name occurrences.
 */
/**
 * @typedef {Map<number, string[]>} EveningMaleTechs
 * Represents a mapping of weekday indices to an array of string of names
 */
/**
 * @typedef {Map<number, Set<string>>} UnavailMap
 * A mapping of weekday indices to set of employee str_aliases whom were marked unavailable
 */
/**
 * @typedef {Shift[]} NotAvailable
 * An array of shifts that correspond to an employee that was already marked as not available on that day.
 */
/**
 * @typedef {{
 *      duplicate: Duplicates,
 *      multipleNames: MultipleNames,
 *      evening: EveningMaleTechs,
 *      notAvailable: NotAvailable,
 *      shiftCount: ShiftCountError,
 *  }} WarningsGroup
 * */
/**
 * @typedef {{expected: number, found: number}} ShiftCountError
 * expected: number of expected shifts for the FTR, taking into account stat holidays
 * found: error value by +/0/- integer value:
 *   (+) is greater than the expected shifts
 *   (0) accounts for the proper number of shifts
 *   (-) less than the expected shifts
 */

export class Warnings {
    /** @type {Duplicates} */
    _duplicate;
    /** @type {MultipleNames} */
    _multipleNames;
    /** @type {EveningMaleTechs} */
    _eveningMaleTechs;

    /** @type {UnavailMap} */
    _unavailableMapping;
    /** @type {NotAvailable} */
    _notAvailable;
    /** @type {number} */
    _shiftCountError;
    /** @type {number} */
    _expectedShiftCount;


    constructor() {
        this._duplicate = new Map();
        this._multipleNames = [];
        this._eveningMaleTechs = new Map();
        this._notAvailable = [];
    }

    /** @returns {WarningsGroup} group of deep copied warnings generated by this class */
    get warningsGroup() {
        return {
            duplicate: this.duplicate,
            multipleNames: this.multipleNames,
            evening: this.eveningMalesTechs,
            notAvailable: this.notAvailable,
            shiftCount: this.shiftCountError,
        }
    }
    /** @returns {Duplicates} a deep copy of duplicate warnings */
    get duplicate() {
        return structuredClone(this._duplicate);
    }
    /** @returns {MultipleNames} a deep copy of multiple names found warning */
    get multipleNames() {
        return structuredClone(this._multipleNames);
    }
    /** @returns {EveningMaleTechs} a deep copy of evening male techs warning */
    get eveningMalesTechs() {
        return structuredClone(this._eveningMaleTechs);
    }
    get unavailableMapping() {
        return structuredClone(this._unavailableMapping);
    }
    /** @param {UnavailMap} mapping  */
    set unavailableMapping(mapping) {
        this._unavailableMapping = mapping;
    }
    get notAvailable() {
        return structuredClone(this._notAvailable);
    }
    /** @returns {ShiftCountError} */
    get shiftCountError() {
        return {
            expected: this._expectedShiftCount,
            found: this._shiftCountError,
        }
    }

    /**
     * @param {string} employeeStatus 
     * @param {number} shiftCount 
     * @param {number} statHolidays 
     */
    shiftCountEval(isFTR, shiftCount, statCount) {
        const FTR_HRS = 10;
        this._expectedShiftCount = FTR_HRS - statCount;

        if (!isFTR) {
            this._expectedShiftCount = shiftCount;
            this._shiftCountError = 0;
            return;
        }

        if (shiftCount === this._expectedShiftCount) {
            this._shiftCountError = 0;
        } else {
            this._shiftCountError = shiftCount - this._expectedShiftCount;
        }
    }

    /**
     * @param {Employee} employee 
     * @param {string[]} names 
     * @returns {boolean} boolean value if employee appears in list of names
     */
    hasMultipleNames(employee, names) {
        const nameCheck = new Set(names.map(n => n.toUpperCase()));

        return nameCheck.has(employee.first_name) ||
               nameCheck.has(employee.str_alias) ||
               nameCheck.has(employee.abbrev);
    }

    /**
    * @param {Shift} shift
    * @param {Array<string>} names
    */
    addMultipleNamesEntry(shift, names) {
        this._multipleNames.push({
            shift: shift,
            names: names
        });
    }

    /**
    * @param {Shift} shift
    */
    addDuplicateNamesEntry(shift) {
        if (this._duplicate.has(shift.weekday)) {
            this._duplicate.get(shift.weekday).push(shift);
        } else {
            this._duplicate.set(shift.weekday, [shift]);
        }
    }

    /**
    * @param {number} dayIndex 
    * @param {string[]} names 
    */
    addEveningMaleTechEntry(dayIndex, names) {
        if (this._eveningMaleTechs.has(dayIndex)) {
            const newNameList = this._eveningMaleTechs.get(dayIndex).concat(names);
            this._eveningMaleTechs.set(dayIndex, newNameList);
        } else {
            this._eveningMaleTechs.set(dayIndex, names);
        }
    }

    /**
    * @param {number} dayIndex 
    * @param {string} name 
    */
    isUnavailable(dayIndex, name) {
        if (this._unavailableMapping.has(dayIndex)) {
            return this._unavailableMapping.get(dayIndex).has(name);
        }
        return false;
    }

    addNotAvailableEntry(shift) {
        if (!this._notAvailable) {
            this._notAvailable = [shift];
        }
        this._notAvailable.push(shift);
    }

    populateUnavailableMap(dayIndex, name) {
        if (!this._unavailableMapping) {
            this._unavailableMapping = new Map();
        }

        if (this._unavailableMapping.has(dayIndex)) {
            this._unavailableMapping.get(dayIndex).add(name);
        } else {
            this._unavailableMapping.set(dayIndex, new Set([name]));
        }
    }
}
