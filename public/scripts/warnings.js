/** @typedef {import('./roster.js').Employee} Employee */
/** @typedef {import('./parser.js').Shift} Shift */
/**
 * @typedef {Map<number, Shift[]>} Duplicates
 * Represents a mapping of weekday indices to an array of row indices where duplicates occur.
 * - The key (`number`) corresponds to a weekday column index.
 * - The value (`Shift[]`) is an array of row indices in the grid where duplicates are found
 */
/**
 * @typedef {Array<{shift: Shift, names: Array<string>}>} MultipleNames
 * Represents a list of shifts paired with a list of multiple name occurrences.
 */
/**
 * @typedef {Map<number, string[]>} EveningMaleTechs
 * Represents a mapping of weekday indices to an array of string of names
 * - The key (`number`) corresponds to a weekday column index.
 * - The value (`string[]`) is an array of strings of male names in both evening slots
 */
/** @typedef {{
 *      duplicate: Duplicates,
 *      multipleNames: MultipleNames,
 *      evening: EveningMaleTechs
 *  }} WarningsGroup
 * */

export class Warnings {
    /** @type {Duplicates} */
    _duplicate;
    /** @type {MultipleNames} */
    _multipleNames;
    /** @type {MultipleNames} */
    _standbyMultipleNames;
    /** @type {EveningMaleTechs} */
    _eveningMaleTechs;


    constructor() {
        this._duplicate = new Map();
        this._multipleNames = [];
        this._eveningMaleTechs = new Map();
    }

    /** @returns {WarningsGroup} group of deep copied warnings generated by this class */
    get warningsGroup() {
        return {
            duplicate: this.duplicate,
            multipleNames: this.multipleNames,
            standbyMultipleNames: this.standbyMultipleNames,
            evening: this.eveningMalesTechs,
        }
    }

    /** @returns {Duplicates} a deep copy of duplicate warnings */
    get duplicate() {
        return structuredClone(this._duplicate);
    }
    /** @returns {MultipleNames} a deep copy of multiple names found warning */
    get multipleNames() {
        return structuredClone(this._multipleNames);
    }
    /** @returns {MultipleNames} a deep copy of standby multiple names warning */
    get standbyMultipleNames() {
        return structuredClone(this._standbyMultipleNames);
    }
    /** @returns {EveningMaleTechs} a deep copy of evening male techs warning */
    get eveningMalesTechs() {
        return structuredClone(this._eveningMaleTechs);
    }

    /**
     * @param {string} employeeStatus 
     * @param {number} shiftCount 
     * @param {number} statHolidays 
     */
    shiftCountEval(employeeStatus, shiftCount, statHolidays) {
        const FTR_HRS = 10;

        switch(employeeStatus) {
            case "FTR":
                return (FTR_HRS - statHolidays) - shiftCount;
            case "PTR0.2":
                break;
        }
    }

    /**
     * @param {Employee} employee 
     * @param {string[]} names 
     * @returns {boolean} boolean value if employee appears in list of names
     */
    hasMultipleNames(employee, names) {
        const nameCheck = new Set(names.map(n => n.toUpperCase()));

        return nameCheck.has(employee.first_name) ||
               nameCheck.has(employee.str_alias) ||
               nameCheck.has(employee.abbrev);
    }

    /**
     * Static method to check whether a shift is contained within a MultipleNames warning list.
     * @param {MultipleNames} multiNameWarning
     * @param {Shift} shift 
     * @returns {{ shift: Shift; names: string[]; } | null} warning object with the shift and the different names written in the shift, or null if not found
     */
    static shiftInMultipleNames(multiNameWarning, shift) {
        for (let i = 0; i < multiNameWarning.length; i++) {
            const warning = multiNameWarning[i];
            if (warning.shift.weekday === shift.weekday &&
                warning.shift.shiftTime === shift.shiftTime &&
                warning.shift.location === shift.location)
            {
                return warning;
            }
        }
        return null;
    }

    /**
    * @param {Shift} shift
    * @param {Array<string>} names
    */
    addMultipleNamesEntry(shift, names) {
        this._multipleNames.push({
            shift: shift,
            names: names
        });
    }

    /**
    * @param {Shift} shift
    */
    addDuplicateNamesEntry(shift) {
        if (this._duplicate.has(shift.weekday)) {
            this._duplicate.get(shift.weekday).push(shift);
        } else {
            this._duplicate.set(shift.weekday, [shift]);
        }
    }
}
